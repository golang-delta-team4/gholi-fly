// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.12.4
// source: company.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCompanyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OwnerId       string                 `protobuf:"bytes,3,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Address       string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Phone         string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCompanyRequest) Reset() {
	*x = CreateCompanyRequest{}
	mi := &file_company_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyRequest) ProtoMessage() {}

func (x *CreateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyRequest.ProtoReflect.Descriptor instead.
func (*CreateCompanyRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCompanyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCompanyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCompanyRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateCompanyRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateCompanyRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CreateCompanyRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CreateCompanyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCompanyResponse) Reset() {
	*x = CreateCompanyResponse{}
	mi := &file_company_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompanyResponse) ProtoMessage() {}

func (x *CreateCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompanyResponse.ProtoReflect.Descriptor instead.
func (*CreateCompanyResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCompanyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateCompanyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetCompanyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Address       string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Phone         string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	OwnerId       string                 `protobuf:"bytes,7,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCompanyResponse) Reset() {
	*x = GetCompanyResponse{}
	mi := &file_company_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyResponse) ProtoMessage() {}

func (x *GetCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{2}
}

func (x *GetCompanyResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetCompanyResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetCompanyResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCompanyResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetCompanyResponse) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *GetCompanyResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetCompanyResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

type UpdateCompanyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	OwnerId       string                 `protobuf:"bytes,3,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	Address       string                 `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Phone         string                 `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string                 `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCompanyRequest) Reset() {
	*x = UpdateCompanyRequest{}
	mi := &file_company_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCompanyRequest) ProtoMessage() {}

func (x *UpdateCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCompanyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCompanyRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateCompanyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCompanyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCompanyRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *UpdateCompanyRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UpdateCompanyRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdateCompanyRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type CreateTripRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CompanyId        string                 `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
	TripType         string                 `protobuf:"bytes,2,opt,name=tripType,proto3" json:"tripType,omitempty"`
	UserReleaseDate  string                 `protobuf:"bytes,3,opt,name=userReleaseDate,proto3" json:"userReleaseDate,omitempty"`
	TourReleaseDate  string                 `protobuf:"bytes,4,opt,name=tourReleaseDate,proto3" json:"tourReleaseDate,omitempty"`
	UserPrice        uint64                 `protobuf:"varint,5,opt,name=userPrice,proto3" json:"userPrice,omitempty"`
	AgencyPrice      uint64                 `protobuf:"varint,6,opt,name=agencyPrice,proto3" json:"agencyPrice,omitempty"`
	PathId           string                 `protobuf:"bytes,7,opt,name=pathId,proto3" json:"pathId,omitempty"`
	MinPassengers    uint64                 `protobuf:"varint,8,opt,name=minPassengers,proto3" json:"minPassengers,omitempty"`
	TechnicalTeamId  string                 `protobuf:"bytes,9,opt,name=technicalTeamId,proto3" json:"technicalTeamId,omitempty"`
	VehicleRequestId string                 `protobuf:"bytes,10,opt,name=vehicleRequestId,proto3" json:"vehicleRequestId,omitempty"`
	SoldTickets      uint64                 `protobuf:"varint,11,opt,name=soldTickets,proto3" json:"soldTickets,omitempty"`
	MaxTickets       uint64                 `protobuf:"varint,12,opt,name=maxTickets,proto3" json:"maxTickets,omitempty"`
	StartDate        string                 `protobuf:"bytes,13,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate          string                 `protobuf:"bytes,14,opt,name=endDate,proto3" json:"endDate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateTripRequest) Reset() {
	*x = CreateTripRequest{}
	mi := &file_company_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTripRequest) ProtoMessage() {}

func (x *CreateTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTripRequest.ProtoReflect.Descriptor instead.
func (*CreateTripRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTripRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CreateTripRequest) GetTripType() string {
	if x != nil {
		return x.TripType
	}
	return ""
}

func (x *CreateTripRequest) GetUserReleaseDate() string {
	if x != nil {
		return x.UserReleaseDate
	}
	return ""
}

func (x *CreateTripRequest) GetTourReleaseDate() string {
	if x != nil {
		return x.TourReleaseDate
	}
	return ""
}

func (x *CreateTripRequest) GetUserPrice() uint64 {
	if x != nil {
		return x.UserPrice
	}
	return 0
}

func (x *CreateTripRequest) GetAgencyPrice() uint64 {
	if x != nil {
		return x.AgencyPrice
	}
	return 0
}

func (x *CreateTripRequest) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *CreateTripRequest) GetMinPassengers() uint64 {
	if x != nil {
		return x.MinPassengers
	}
	return 0
}

func (x *CreateTripRequest) GetTechnicalTeamId() string {
	if x != nil {
		return x.TechnicalTeamId
	}
	return ""
}

func (x *CreateTripRequest) GetVehicleRequestId() string {
	if x != nil {
		return x.VehicleRequestId
	}
	return ""
}

func (x *CreateTripRequest) GetSoldTickets() uint64 {
	if x != nil {
		return x.SoldTickets
	}
	return 0
}

func (x *CreateTripRequest) GetMaxTickets() uint64 {
	if x != nil {
		return x.MaxTickets
	}
	return 0
}

func (x *CreateTripRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CreateTripRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type CreateTripResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTripResponse) Reset() {
	*x = CreateTripResponse{}
	mi := &file_company_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTripResponse) ProtoMessage() {}

func (x *CreateTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTripResponse.ProtoReflect.Descriptor instead.
func (*CreateTripResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTripResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTripResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTripResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CompanyId        string                 `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	TripType         string                 `protobuf:"bytes,3,opt,name=trip_type,json=tripType,proto3" json:"trip_type,omitempty"`
	ReleaseDate      string                 `protobuf:"bytes,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Price            float64                `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`
	PathId           string                 `protobuf:"bytes,8,opt,name=path_id,json=pathId,proto3" json:"path_id,omitempty"`
	FromCountry      string                 `protobuf:"bytes,9,opt,name=from_country,json=fromCountry,proto3" json:"from_country,omitempty"`
	ToCountry        string                 `protobuf:"bytes,10,opt,name=to_country,json=toCountry,proto3" json:"to_country,omitempty"`
	Origin           string                 `protobuf:"bytes,11,opt,name=origin,proto3" json:"origin,omitempty"`
	FromTerminalName string                 `protobuf:"bytes,12,opt,name=from_terminal_name,json=fromTerminalName,proto3" json:"from_terminal_name,omitempty"`
	ToTerminalName   string                 `protobuf:"bytes,13,opt,name=to_terminal_name,json=toTerminalName,proto3" json:"to_terminal_name,omitempty"`
	Destination      string                 `protobuf:"bytes,14,opt,name=destination,proto3" json:"destination,omitempty"`
	PathName         string                 `protobuf:"bytes,15,opt,name=path_name,json=pathName,proto3" json:"path_name,omitempty"`
	PathDistanceKm   float64                `protobuf:"fixed64,16,opt,name=path_distance_km,json=pathDistanceKm,proto3" json:"path_distance_km,omitempty"`
	Status           string                 `protobuf:"bytes,17,opt,name=status,proto3" json:"status,omitempty"`
	MinPassengers    uint32                 `protobuf:"varint,18,opt,name=min_passengers,json=minPassengers,proto3" json:"min_passengers,omitempty"`
	TechnicalTeamId  string                 `protobuf:"bytes,19,opt,name=technical_team_id,json=technicalTeamId,proto3" json:"technical_team_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetTripResponse) Reset() {
	*x = GetTripResponse{}
	mi := &file_company_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTripResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTripResponse) ProtoMessage() {}

func (x *GetTripResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTripResponse.ProtoReflect.Descriptor instead.
func (*GetTripResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{6}
}

func (x *GetTripResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTripResponse) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetTripResponse) GetTripType() string {
	if x != nil {
		return x.TripType
	}
	return ""
}

func (x *GetTripResponse) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *GetTripResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetTripResponse) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *GetTripResponse) GetFromCountry() string {
	if x != nil {
		return x.FromCountry
	}
	return ""
}

func (x *GetTripResponse) GetToCountry() string {
	if x != nil {
		return x.ToCountry
	}
	return ""
}

func (x *GetTripResponse) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *GetTripResponse) GetFromTerminalName() string {
	if x != nil {
		return x.FromTerminalName
	}
	return ""
}

func (x *GetTripResponse) GetToTerminalName() string {
	if x != nil {
		return x.ToTerminalName
	}
	return ""
}

func (x *GetTripResponse) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *GetTripResponse) GetPathName() string {
	if x != nil {
		return x.PathName
	}
	return ""
}

func (x *GetTripResponse) GetPathDistanceKm() float64 {
	if x != nil {
		return x.PathDistanceKm
	}
	return 0
}

func (x *GetTripResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetTripResponse) GetMinPassengers() uint32 {
	if x != nil {
		return x.MinPassengers
	}
	return 0
}

func (x *GetTripResponse) GetTechnicalTeamId() string {
	if x != nil {
		return x.TechnicalTeamId
	}
	return ""
}

type UpdateTripRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CompanyId        string                 `protobuf:"bytes,1,opt,name=companyId,proto3" json:"companyId,omitempty"`
	TripType         string                 `protobuf:"bytes,2,opt,name=tripType,proto3" json:"tripType,omitempty"`
	UserReleaseDate  string                 `protobuf:"bytes,3,opt,name=userReleaseDate,proto3" json:"userReleaseDate,omitempty"`
	TourReleaseDate  string                 `protobuf:"bytes,4,opt,name=tourReleaseDate,proto3" json:"tourReleaseDate,omitempty"`
	UserPrice        uint64                 `protobuf:"varint,5,opt,name=userPrice,proto3" json:"userPrice,omitempty"`
	AgencyPrice      uint64                 `protobuf:"varint,6,opt,name=agencyPrice,proto3" json:"agencyPrice,omitempty"`
	PathId           string                 `protobuf:"bytes,7,opt,name=pathId,proto3" json:"pathId,omitempty"`
	MinPassengers    uint64                 `protobuf:"varint,8,opt,name=minPassengers,proto3" json:"minPassengers,omitempty"`
	TechnicalTeamId  string                 `protobuf:"bytes,9,opt,name=technicalTeamId,proto3" json:"technicalTeamId,omitempty"`
	VehicleRequestId string                 `protobuf:"bytes,10,opt,name=vehicleRequestId,proto3" json:"vehicleRequestId,omitempty"`
	SoldTickets      uint64                 `protobuf:"varint,11,opt,name=soldTickets,proto3" json:"soldTickets,omitempty"`
	MaxTickets       uint64                 `protobuf:"varint,12,opt,name=maxTickets,proto3" json:"maxTickets,omitempty"`
	StartDate        string                 `protobuf:"bytes,13,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate          string                 `protobuf:"bytes,14,opt,name=endDate,proto3" json:"endDate,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateTripRequest) Reset() {
	*x = UpdateTripRequest{}
	mi := &file_company_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTripRequest) ProtoMessage() {}

func (x *UpdateTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTripRequest.ProtoReflect.Descriptor instead.
func (*UpdateTripRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTripRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *UpdateTripRequest) GetTripType() string {
	if x != nil {
		return x.TripType
	}
	return ""
}

func (x *UpdateTripRequest) GetUserReleaseDate() string {
	if x != nil {
		return x.UserReleaseDate
	}
	return ""
}

func (x *UpdateTripRequest) GetTourReleaseDate() string {
	if x != nil {
		return x.TourReleaseDate
	}
	return ""
}

func (x *UpdateTripRequest) GetUserPrice() uint64 {
	if x != nil {
		return x.UserPrice
	}
	return 0
}

func (x *UpdateTripRequest) GetAgencyPrice() uint64 {
	if x != nil {
		return x.AgencyPrice
	}
	return 0
}

func (x *UpdateTripRequest) GetPathId() string {
	if x != nil {
		return x.PathId
	}
	return ""
}

func (x *UpdateTripRequest) GetMinPassengers() uint64 {
	if x != nil {
		return x.MinPassengers
	}
	return 0
}

func (x *UpdateTripRequest) GetTechnicalTeamId() string {
	if x != nil {
		return x.TechnicalTeamId
	}
	return ""
}

func (x *UpdateTripRequest) GetVehicleRequestId() string {
	if x != nil {
		return x.VehicleRequestId
	}
	return ""
}

func (x *UpdateTripRequest) GetSoldTickets() uint64 {
	if x != nil {
		return x.SoldTickets
	}
	return 0
}

func (x *UpdateTripRequest) GetMaxTickets() uint64 {
	if x != nil {
		return x.MaxTickets
	}
	return 0
}

func (x *UpdateTripRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *UpdateTripRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type GetTripsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trips         []*GetTripResponse     `protobuf:"bytes,1,rep,name=trips,proto3" json:"trips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTripsResponse) Reset() {
	*x = GetTripsResponse{}
	mi := &file_company_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTripsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTripsResponse) ProtoMessage() {}

func (x *GetTripsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTripsResponse.ProtoReflect.Descriptor instead.
func (*GetTripsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{8}
}

func (x *GetTripsResponse) GetTrips() []*GetTripResponse {
	if x != nil {
		return x.Trips
	}
	return nil
}

type BuyTicketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TripId        string                 `protobuf:"bytes,1,opt,name=tripId,proto3" json:"tripId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuyTicketRequest) Reset() {
	*x = BuyTicketRequest{}
	mi := &file_company_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyTicketRequest) ProtoMessage() {}

func (x *BuyTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyTicketRequest.ProtoReflect.Descriptor instead.
func (*BuyTicketRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{9}
}

func (x *BuyTicketRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

type BuyAgencyTicketRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TripId        string                 `protobuf:"bytes,1,opt,name=tripId,proto3" json:"tripId,omitempty"`
	AgencyId      string                 `protobuf:"bytes,2,opt,name=agencyId,proto3" json:"agencyId,omitempty"`
	TicketCount   uint64                 `protobuf:"varint,3,opt,name=ticketCount,proto3" json:"ticketCount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuyAgencyTicketRequest) Reset() {
	*x = BuyAgencyTicketRequest{}
	mi := &file_company_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyAgencyTicketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyAgencyTicketRequest) ProtoMessage() {}

func (x *BuyAgencyTicketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyAgencyTicketRequest.ProtoReflect.Descriptor instead.
func (*BuyAgencyTicketRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{10}
}

func (x *BuyAgencyTicketRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *BuyAgencyTicketRequest) GetAgencyId() string {
	if x != nil {
		return x.AgencyId
	}
	return ""
}

func (x *BuyAgencyTicketRequest) GetTicketCount() uint64 {
	if x != nil {
		return x.TicketCount
	}
	return 0
}

type BuyTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TicketId      string                 `protobuf:"bytes,1,opt,name=ticketId,proto3" json:"ticketId,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TotalPrice    uint64                 `protobuf:"varint,3,opt,name=totalPrice,proto3" json:"totalPrice,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuyTicketResponse) Reset() {
	*x = BuyTicketResponse{}
	mi := &file_company_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuyTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuyTicketResponse) ProtoMessage() {}

func (x *BuyTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuyTicketResponse.ProtoReflect.Descriptor instead.
func (*BuyTicketResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{11}
}

func (x *BuyTicketResponse) GetTicketId() string {
	if x != nil {
		return x.TicketId
	}
	return ""
}

func (x *BuyTicketResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BuyTicketResponse) GetTotalPrice() uint64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

type CancelTicketResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelTicketResponse) Reset() {
	*x = CancelTicketResponse{}
	mi := &file_company_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelTicketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelTicketResponse) ProtoMessage() {}

func (x *CancelTicketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelTicketResponse.ProtoReflect.Descriptor instead.
func (*CancelTicketResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{12}
}

func (x *CancelTicketResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreateTechnicalTeamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CompanyId     string                 `protobuf:"bytes,3,opt,name=companyId,proto3" json:"companyId,omitempty"`
	TripType      string                 `protobuf:"bytes,4,opt,name=tripType,proto3" json:"tripType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTechnicalTeamRequest) Reset() {
	*x = CreateTechnicalTeamRequest{}
	mi := &file_company_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTechnicalTeamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTechnicalTeamRequest) ProtoMessage() {}

func (x *CreateTechnicalTeamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTechnicalTeamRequest.ProtoReflect.Descriptor instead.
func (*CreateTechnicalTeamRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{13}
}

func (x *CreateTechnicalTeamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTechnicalTeamRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateTechnicalTeamRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CreateTechnicalTeamRequest) GetTripType() string {
	if x != nil {
		return x.TripType
	}
	return ""
}

type CreateTechnicalTeamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTechnicalTeamResponse) Reset() {
	*x = CreateTechnicalTeamResponse{}
	mi := &file_company_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTechnicalTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTechnicalTeamResponse) ProtoMessage() {}

func (x *CreateTechnicalTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTechnicalTeamResponse.ProtoReflect.Descriptor instead.
func (*CreateTechnicalTeamResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{14}
}

func (x *CreateTechnicalTeamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateTechnicalTeamResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SetTechnicalTeamToTripRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TechnicalTeamId string                 `protobuf:"bytes,1,opt,name=technicalTeamId,proto3" json:"technicalTeamId,omitempty"`
	TripId          string                 `protobuf:"bytes,2,opt,name=tripId,proto3" json:"tripId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetTechnicalTeamToTripRequest) Reset() {
	*x = SetTechnicalTeamToTripRequest{}
	mi := &file_company_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTechnicalTeamToTripRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTechnicalTeamToTripRequest) ProtoMessage() {}

func (x *SetTechnicalTeamToTripRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTechnicalTeamToTripRequest.ProtoReflect.Descriptor instead.
func (*SetTechnicalTeamToTripRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{15}
}

func (x *SetTechnicalTeamToTripRequest) GetTechnicalTeamId() string {
	if x != nil {
		return x.TechnicalTeamId
	}
	return ""
}

func (x *SetTechnicalTeamToTripRequest) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

type AddTechnicalTeamMemberRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          string                 `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Position        string                 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	TechnicalTeamId string                 `protobuf:"bytes,3,opt,name=technicalTeamId,proto3" json:"technicalTeamId,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddTechnicalTeamMemberRequest) Reset() {
	*x = AddTechnicalTeamMemberRequest{}
	mi := &file_company_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTechnicalTeamMemberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTechnicalTeamMemberRequest) ProtoMessage() {}

func (x *AddTechnicalTeamMemberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTechnicalTeamMemberRequest.ProtoReflect.Descriptor instead.
func (*AddTechnicalTeamMemberRequest) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{16}
}

func (x *AddTechnicalTeamMemberRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AddTechnicalTeamMemberRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *AddTechnicalTeamMemberRequest) GetTechnicalTeamId() string {
	if x != nil {
		return x.TechnicalTeamId
	}
	return ""
}

type GetTechnicalTeamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CompanyId     string                 `protobuf:"bytes,4,opt,name=companyId,proto3" json:"companyId,omitempty"`
	TripType      string                 `protobuf:"bytes,5,opt,name=tripType,proto3" json:"tripType,omitempty"`
	MembersId     []string               `protobuf:"bytes,6,rep,name=membersId,proto3" json:"membersId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechnicalTeamResponse) Reset() {
	*x = GetTechnicalTeamResponse{}
	mi := &file_company_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechnicalTeamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechnicalTeamResponse) ProtoMessage() {}

func (x *GetTechnicalTeamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechnicalTeamResponse.ProtoReflect.Descriptor instead.
func (*GetTechnicalTeamResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{17}
}

func (x *GetTechnicalTeamResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTechnicalTeamResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTechnicalTeamResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetTechnicalTeamResponse) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetTechnicalTeamResponse) GetTripType() string {
	if x != nil {
		return x.TripType
	}
	return ""
}

func (x *GetTechnicalTeamResponse) GetMembersId() []string {
	if x != nil {
		return x.MembersId
	}
	return nil
}

type GetTechnicalTeamsResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Teams         []*GetTechnicalTeamResponse `protobuf:"bytes,1,rep,name=teams,proto3" json:"teams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTechnicalTeamsResponse) Reset() {
	*x = GetTechnicalTeamsResponse{}
	mi := &file_company_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTechnicalTeamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTechnicalTeamsResponse) ProtoMessage() {}

func (x *GetTechnicalTeamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_company_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTechnicalTeamsResponse.ProtoReflect.Descriptor instead.
func (*GetTechnicalTeamsResponse) Descriptor() ([]byte, []int) {
	return file_company_proto_rawDescGZIP(), []int{18}
}

func (x *GetTechnicalTeamsResponse) GetTeams() []*GetTechnicalTeamResponse {
	if x != nil {
		return x.Teams
	}
	return nil
}

var File_company_proto protoreflect.FileDescriptor

var file_company_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xac, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x41,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xba, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xac,
	0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xef, 0x03,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e,
	0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x64,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x3e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xb5, 0x04, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x6f, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x61,
	0x74, 0x68, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xef, 0x03, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x75, 0x72, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x6f, 0x75, 0x72,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x61, 0x74, 0x68, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x65, 0x6e,
	0x67, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x50,
	0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x05, 0x74, 0x72, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05,
	0x74, 0x72, 0x69, 0x70, 0x73, 0x22, 0x2a, 0x0a, 0x10, 0x42, 0x75, 0x79, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x69,
	0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49,
	0x64, 0x22, 0x6e, 0x0a, 0x16, 0x42, 0x75, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x72, 0x69, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x69,
	0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x69, 0x0a, 0x11, 0x42, 0x75, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x30, 0x0a, 0x14,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8c,
	0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22, 0x47, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x54, 0x6f, 0x54, 0x72, 0x69, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1d, 0x41, 0x64, 0x64,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x69,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x49, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x74, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x74, 0x65, 0x61, 0x6d,
	0x73, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x2d, 0x74, 0x65, 0x61,
	0x6d, 0x34, 0x2f, 0x67, 0x68, 0x6f, 0x6c, 0x69, 0x2d, 0x66, 0x6c, 0x79, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_company_proto_rawDescOnce sync.Once
	file_company_proto_rawDescData = file_company_proto_rawDesc
)

func file_company_proto_rawDescGZIP() []byte {
	file_company_proto_rawDescOnce.Do(func() {
		file_company_proto_rawDescData = protoimpl.X.CompressGZIP(file_company_proto_rawDescData)
	})
	return file_company_proto_rawDescData
}

var file_company_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_company_proto_goTypes = []any{
	(*CreateCompanyRequest)(nil),          // 0: CreateCompanyRequest
	(*CreateCompanyResponse)(nil),         // 1: CreateCompanyResponse
	(*GetCompanyResponse)(nil),            // 2: GetCompanyResponse
	(*UpdateCompanyRequest)(nil),          // 3: UpdateCompanyRequest
	(*CreateTripRequest)(nil),             // 4: CreateTripRequest
	(*CreateTripResponse)(nil),            // 5: CreateTripResponse
	(*GetTripResponse)(nil),               // 6: GetTripResponse
	(*UpdateTripRequest)(nil),             // 7: UpdateTripRequest
	(*GetTripsResponse)(nil),              // 8: GetTripsResponse
	(*BuyTicketRequest)(nil),              // 9: BuyTicketRequest
	(*BuyAgencyTicketRequest)(nil),        // 10: BuyAgencyTicketRequest
	(*BuyTicketResponse)(nil),             // 11: BuyTicketResponse
	(*CancelTicketResponse)(nil),          // 12: CancelTicketResponse
	(*CreateTechnicalTeamRequest)(nil),    // 13: CreateTechnicalTeamRequest
	(*CreateTechnicalTeamResponse)(nil),   // 14: CreateTechnicalTeamResponse
	(*SetTechnicalTeamToTripRequest)(nil), // 15: SetTechnicalTeamToTripRequest
	(*AddTechnicalTeamMemberRequest)(nil), // 16: AddTechnicalTeamMemberRequest
	(*GetTechnicalTeamResponse)(nil),      // 17: GetTechnicalTeamResponse
	(*GetTechnicalTeamsResponse)(nil),     // 18: GetTechnicalTeamsResponse
}
var file_company_proto_depIdxs = []int32{
	6,  // 0: GetTripsResponse.trips:type_name -> GetTripResponse
	17, // 1: GetTechnicalTeamsResponse.teams:type_name -> GetTechnicalTeamResponse
	2,  // [2:2] is the sub-list for method output_type
	2,  // [2:2] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_company_proto_init() }
func file_company_proto_init() {
	if File_company_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_company_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_company_proto_goTypes,
		DependencyIndexes: file_company_proto_depIdxs,
		MessageInfos:      file_company_proto_msgTypes,
	}.Build()
	File_company_proto = out.File
	file_company_proto_rawDesc = nil
	file_company_proto_goTypes = nil
	file_company_proto_depIdxs = nil
}
