package notification

import (
	"context"
	"log"
	"notification-nats/config"
	"notification-nats/shared"

	// This import path matches whatever was generated by your .proto go_package
	pb "notification-nats/pb"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

const (
	ErrUserNotFound = "user not found"
)

type Service struct {
	pb.UnimplementedNotificationServiceServer
	DB     *gorm.DB
	Config config.Config
}

func (s *Service) AddNotification(ctx context.Context, req *pb.AddNotificationRequest) (*pb.AddNotificationResponse, error) {
	userUUID, err := uuid.Parse(req.UserId)
	if err != nil {
		return &pb.AddNotificationResponse{
			Success: false,
			Error:   "ID Error: " + err.Error(),
		}, nil
	}
	userResp, err := GetUserByUUID(req.UserId, s.Config)
	if err != nil || userResp == nil {
		return &pb.AddNotificationResponse{
			Success: false,
			Error:   ErrUserNotFound,
		}, nil
	}
	//TODO: should handle name and email from your logic
	msg := shared.OutBoxMessage{
		ID:          uuid.NewString(),
		EventName:   req.EventName,
		UserID:      userUUID,
		Name:        userResp.FirstName + " " + userResp.LastName,
		Email:       userResp.Email,
		Message:     req.Message,
		IsProcessed: false,
	}
	if err := s.DB.Create(&msg).Error; err != nil {
		log.Println("DB error:", err)
		return &pb.AddNotificationResponse{
			Success: false,
			Error:   "DB Error: " + err.Error(),
		}, nil
	}

	return &pb.AddNotificationResponse{
		Success: true,
		Error:   "",
	}, nil
}
